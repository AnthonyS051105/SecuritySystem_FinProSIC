/*
 * Mini Security System - ESP32-CAM Slave Module
 * 
 * Deskripsi:
 * ESP32-CAM sebagai modul kamera yang menerima perintah dari ESP32 controller
 * untuk mengambil foto dan mengirim data gambar via Serial.
 * 
 * Hardware:
 * - ESP32-CAM (AI Thinker module)
 * - MicroSD Card (opsional untuk backup)
 * 
 * Komunikasi Serial2:
 * - ESP32-CAM TX2 (GPIO14) -> ESP32 RX2 (GPIO16)
 * - ESP32-CAM RX2 (GPIO15) <- ESP32 TX2 (GPIO17)
 * - Baudrate: 115200
 * 
 * Protokol Komunikasi:
 * - Perintah dari ESP32: "TEST" -> Response: "READY"
 * - Perintah dari ESP32: "CAPTURE" -> Response: "OK" lalu kirim data
 * - Format data: "SIZE:12345\n" diikuti raw binary JPEG data
 * 
 * CATATAN PENTING:
 * File ini adalah CONTOH untuk diupload ke ESP32-CAM secara terpisah.
 * Untuk menggunakannya:
 * 1. Ubah platformio.ini menjadi board = esp32cam
 * 2. Rename file ini menjadi main.cpp
 * 3. Upload ke ESP32-CAM
 * 4. Kembalikan platformio.ini ke board = esp32dev
 * 5. Upload kode utama ke ESP32
 * 
 * Author: Security System Project
 * Date: October 2025
 */

#include <Arduino.h>
#include "esp_camera.h"
#include "FS.h"
#include "SD_MMC.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"

// ==================== KONFIGURASI PIN SERIAL2 ====================
#define RXD2 15  // ESP32-CAM RX2 <- ESP32 TX2 (GPIO17)
#define TXD2 14  // ESP32-CAM TX2 -> ESP32 RX2 (GPIO16)

// ==================== KONFIGURASI PIN KAMERA ====================
// Pin untuk ESP32-CAM AI Thinker
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// ==================== VARIABEL GLOBAL ====================
int imageCount = 0;
bool sdCardAvailable = false;

// ==================== DEKLARASI FUNGSI ====================
void initCamera();
void initSDCard();
bool captureAndSendImage();
bool saveImageToSD(camera_fb_t *fb);
void handleSerialCommands();

// ==================== SETUP ====================
void setup() {
  // Nonaktifkan brownout detector untuk stabilitas
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  
  // Inisialisasi Serial untuk debugging (via USB)
  Serial.begin(115200);
  delay(1000);
  
  Serial.println();
  Serial.println("========================================");
  Serial.println("  ESP32-CAM Slave Module");
  Serial.println("========================================");
  Serial.println();
  
  // Inisialisasi Serial2 untuk komunikasi dengan ESP32 Controller
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);
  delay(1000);
  Serial.println("[INIT] Serial2 initialized (GPIO14/15)");
  
  // Inisialisasi kamera
  initCamera();
  
  // Inisialisasi SD Card (opsional untuk backup)
  initSDCard();
  
  Serial.println();
  Serial.println("========================================");
  Serial.println("  ESP32-CAM Ready!");
  Serial.println("========================================");
  Serial2.println("READY"); // Kirim status ready ke ESP32 controller via Serial2
  Serial.println();
}

// ==================== LOOP ====================
void loop() {
  // Tunggu perintah dari ESP32 controller
  handleSerialCommands();
  delay(10);
}

// ==================== IMPLEMENTASI FUNGSI ====================

/**
 * Inisialisasi kamera ESP32-CAM
 */
void initCamera() {
  Serial.println("[INIT] Menginisialisasi kamera...");
  
  // Konfigurasi kamera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  
  // Konfigurasi frame size dan quality (optimal untuk transfer Serial)
  if(psramFound()){
    config.frame_size = FRAMESIZE_SVGA;   // 800x600 (lebih kecil untuk Serial)
    config.jpeg_quality = 12;             // 0-63, semakin kecil semakin bagus
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_VGA;    // 640x480
    config.jpeg_quality = 15;
    config.fb_count = 1;
  }
  
  // Inisialisasi kamera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("[ERROR] Kamera gagal diinisialisasi: 0x%x\n", err);
    return;
  }
  
  Serial.println("[INIT] Kamera berhasil diinisialisasi");
  
  // Setting tambahan untuk kualitas gambar
  sensor_t * s = esp_camera_sensor_get();
  s->set_brightness(s, 0);     // -2 to 2
  s->set_contrast(s, 0);       // -2 to 2
  s->set_saturation(s, 0);     // -2 to 2
  s->set_special_effect(s, 0); // 0 to 6 (0 - No Effect)
  s->set_whitebal(s, 1);       // 0 = disable , 1 = enable
  s->set_awb_gain(s, 1);       // 0 = disable , 1 = enable
  s->set_wb_mode(s, 0);        // 0 to 4
  s->set_exposure_ctrl(s, 1);  // 0 = disable , 1 = enable
  s->set_aec2(s, 0);           // 0 = disable , 1 = enable
  s->set_gain_ctrl(s, 1);      // 0 = disable , 1 = enable
  s->set_agc_gain(s, 0);       // 0 to 30
  s->set_gainceiling(s, (gainceiling_t)0);  // 0 to 6
  s->set_bpc(s, 0);            // 0 = disable , 1 = enable
  s->set_wpc(s, 1);            // 0 = disable , 1 = enable
  s->set_raw_gma(s, 1);        // 0 = disable , 1 = enable
  s->set_lenc(s, 1);           // 0 = disable , 1 = enable
  s->set_hmirror(s, 0);        // 0 = disable , 1 = enable
  s->set_vflip(s, 0);          // 0 = disable , 1 = enable
  s->set_dcw(s, 1);            // 0 = disable , 1 = enable
  s->set_colorbar(s, 0);       // 0 = disable , 1 = enable
}

/**
 * Inisialisasi SD Card (opsional untuk backup)
 */
void initSDCard() {
  Serial.println("[INIT] Menginisialisasi SD Card...");
  
  if(!SD_MMC.begin("/sdcard", true)) { // Mode 1-bit
    Serial.println("[WARNING] SD Card gagal dimount!");
    sdCardAvailable = false;
    return;
  }
  
  uint8_t cardType = SD_MMC.cardType();
  
  if(cardType == CARD_NONE) {
    Serial.println("[WARNING] SD Card tidak terdeteksi!");
    sdCardAvailable = false;
    return;
  }
  
  Serial.print("[INIT] SD Card Type: ");
  if(cardType == CARD_MMC){
    Serial.println("MMC");
  } else if(cardType == CARD_SD){
    Serial.println("SDSC");
  } else if(cardType == CARD_SDHC){
    Serial.println("SDHC");
  } else {
    Serial.println("UNKNOWN");
  }
  
  uint64_t cardSize = SD_MMC.cardSize() / (1024 * 1024);
  Serial.printf("[INIT] SD Card Size: %lluMB\n", cardSize);
  Serial.println("[INIT] SD Card berhasil diinisialisasi");
  sdCardAvailable = true;
}

/**
 * Handle perintah Serial dari ESP32 controller
 */
void handleSerialCommands() {
  if (Serial2.available()) {  // Baca dari Serial2 (GPIO15)
    String command = Serial2.readStringUntil('\n');
    command.trim();
    
    Serial.print("[DEBUG] Received command: ");
    Serial.println(command);
    
    if (command == "TEST") {
      // Response untuk test koneksi
      Serial2.println("READY");
      Serial.println("[CMD] Sent READY");
    }
    else if (command == "CAPTURE") {
      // Ambil dan kirim gambar
      Serial.println("[CMD] Capture command received");
      bool success = captureAndSendImage();
      if (!success) {
        Serial2.println("ERROR");
        Serial.println("[CMD] Sent ERROR");
      }
    }
  }
}

/**
 * Mengambil foto dan mengirim via Serial2
 */
bool captureAndSendImage() {
  Serial.println("[CAMERA] Mengambil foto...");
  
  // Ambil foto dari kamera
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("[ERROR] Gagal mengambil foto!");
    return false;
  }
  
  Serial.printf("[CAMERA] Foto berhasil diambil! Ukuran: %d bytes\n", fb->len);
  
  // Backup ke SD Card jika tersedia
  if (sdCardAvailable) {
    saveImageToSD(fb);
  }
  
  // Kirim response OK dan ukuran gambar via Serial2
  Serial2.println("OK");
  Serial.println("[CAMERA] Sent OK to controller");
  delay(100); // Beri waktu ESP32 controller untuk siap menerima
  
  // Kirim header dengan ukuran gambar
  Serial2.printf("SIZE:%d\n", fb->len);
  Serial.printf("[CAMERA] Sent SIZE:%d\n", fb->len);
  delay(100);
  
  // Kirim raw binary data via Serial2
  Serial2.write(fb->buf, fb->len);
  Serial2.flush(); // Pastikan semua data terkirim
  
  Serial.println("[CAMERA] Gambar berhasil dikirim via Serial2");
  
  // Kembalikan frame buffer
  esp_camera_fb_return(fb);
  
  return true;
}

/**
 * Simpan gambar ke SD Card (backup)
 */
bool saveImageToSD(camera_fb_t *fb) {
  if (!sdCardAvailable) {
    return false;
  }
  
  imageCount++;
  char filename[32];
  sprintf(filename, "/image%03d.jpg", imageCount);
  
  Serial.printf("[SD] Menyimpan backup ke: %s\n", filename);
  
  File file = SD_MMC.open(filename, FILE_WRITE);
  if (!file) {
    Serial.println("[ERROR] Gagal membuka file!");
    return false;
  }
  
  size_t written = file.write(fb->buf, fb->len);
  file.close();
  
  if (written == fb->len) {
    Serial.printf("[SD] Backup berhasil! (%d bytes)\n", written);
    return true;
  } else {
    Serial.println("[ERROR] Gagal menulis backup!");
    return false;
  }
}
